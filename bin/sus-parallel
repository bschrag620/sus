#!/usr/bin/env ruby

require_relative '../lib/sus'
require_relative '../lib/sus/progress'

require 'etc'

def prepare(paths, registry)
	if paths&.any?
		paths.each do |path|
			registry.load(path)
		end
	else
		Dir.glob("test/**/*.rb").each do |path|
			registry.load(path)
		end
	end
end

Result = Struct.new(:job, :assertions)

filter = Sus::Filter.new
output = Sus::Output.default

jobs = Thread::Queue.new
results = Thread::Queue.new
guard = Thread::Mutex.new
progress = Sus::Progress.new(output)
count = Etc.nprocessors

loader = Thread.new do
	prepare(ARGV, filter)
	
	filter.each do |child|
		guard.synchronize{progress.expand}
		jobs << child
	end
	
	jobs.close
end

aggregation = Thread.new do
	top = Sus::Assertions.new(output: Sus::Output::Null.new)
	
	while result = results.pop
		guard.synchronize{progress.increment}
		
		top.add(result.assertions)
		
		guard.synchronize{progress.report(count, top, :busy)}
	end
	
	guard.synchronize{progress.clear}
	
	top
end

workers = count.times.map do |index|
	Thread.new do
		while job = jobs.pop
			guard.synchronize{progress.report(index, job, :busy)}
			
			assertions = Sus::Assertions.new(output: Sus::Output::Null.new)
			job.call(assertions)
			results << Result.new(job, assertions)
			
			guard.synchronize{progress.report(index, "idle", :free)}
		end
	end
end

loader.join

workers.each(&:join)
results.close

assertions = aggregation.value

assertions.print(output)
output.puts

if assertions.failed.any?
	output.puts
	
	assertions.failed.each do |failure|
		failure.output.append(output)
	end
end
