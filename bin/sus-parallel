#!/usr/bin/env ruby

require_relative '../lib/sus/config'
config = Sus::Config.load

Result = Struct.new(:job, :assertions)

require_relative '../lib/sus'
require_relative '../lib/sus/progress'
jobs = Thread::Queue.new
results = Thread::Queue.new
guard = Thread::Mutex.new
progress = Sus::Progress.new(config.output)

require 'etc'
count = Etc.nprocessors

loader = Thread.new do
	filter = Sus::Filter.new
	config.prepare(filter)
	
	filter.each do |child|
		guard.synchronize{progress.expand}
		jobs << child
	end
	
	jobs.close
end

top = Sus::Assertions.new(output: Sus::Output::Null.new)
config.before_tests(top)

aggregation = Thread.new do
	while result = results.pop
		guard.synchronize{progress.increment}
		
		top.add(result.assertions)
		
		guard.synchronize{progress.report(count, top, :busy)}
	end
	
	guard.synchronize{progress.clear}
	
	top
end

workers = count.times.map do |index|
	Thread.new do
		while job = jobs.pop
			guard.synchronize{progress.report(index, job, :busy)}
			
			assertions = Sus::Assertions.new(output: Sus::Output::Null.new)
			job.call(assertions)
			results << Result.new(job, assertions)
			
			guard.synchronize{progress.report(index, "idle", :free)}
		end
	end
end

loader.join

workers.each(&:join)
results.close

assertions = aggregation.value
config.after_tests(assertions)

if assertions.failed.any?
	exit(1)
end
